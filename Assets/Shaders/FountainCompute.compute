// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GeneratePoints

struct Particle {
	float3 pos;
	float  _pad1;
	float4 col;
};

struct CellInformation {
    float3 pos;
	float  _pad1;
	float3 size;
	float  _pad2;
	float4 color;
};

StructuredBuffer<Particle> Particles;

AppendStructuredBuffer<CellInformation> PointBufferOutput;

float4x4 Object2World;
uint Resolution;


[numthreads(8,8,8)]
void GeneratePoints (uint3 id : SV_DispatchThreadID)
{
    uint particleCount, stride;
	Particles.GetDimensions(particleCount, stride);

	float3 objSpaceCellPos = float3(id.x, id.y, id.z)/float(Resolution) - float3(0.5, 0.5, 0.5);

	float3 cellPos = mul(Object2World, float4(objSpaceCellPos, 1)).xyz;
	float3 cellSize = mul(Object2World, float4(1.0/Resolution, 1.0/Resolution, 1.0/Resolution, 1)).xyz;

	float4 color;
	float particleNum = 0;
	for(uint i = 0; i < particleCount; i++) {
		Particle particle = Particles.Load(i);
		float dist = length(cellPos - particle.pos);
		if(dist < 0.08) {
			color += particle.col;
			particleNum++;
		}
	}

	if(color.a != 0) {
		color /= particleNum;


		CellInformation cell;
		cell.pos = objSpaceCellPos;
		cell.size = cellSize;
		cell.color = color;
		cell._pad1 = 0;
		cell._pad2 = 0;

		PointBufferOutput.Append(cell);
	}
}


